//--------------- COLORS ---------------//

$white: #fff;
$black: #111;
$gold: #a79966;
$gray: #68686a;
$green: #5F5;
$red: #f13030;

$bgcolor: #fefefc;

//--------------- TYPOGRAPHY ---------------//

@import url(http://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,900);

// FONT SIZE MIXIN FOR CONVERTING PX TO REM
@mixin font-size($sizeValue: 1.6) {
    font-size: ($sizeValue * 10) + px;
    font-size: $sizeValue + rem;
}

// FONT VARIABLES
$sans-serif     :   'Source Sans Pro', sans-serif;
$header-font    :   $sans-serif;

// FONT WEIGHTS
$bold-weight: 900;
$normal-weight: 400;


//************************************************************************//
// Example: @include prefixer(border-radius, $radii, webkit ms spec);
//************************************************************************//
// Variables located in settings

@mixin prefixer ($property, $value, $prefixes) {
    @each $prefix in $prefixes {
        @if $prefix == webkit {
            @if $prefix-for-webkit {
                -webkit-#{$property}: $value;
            }
        }
        @else if $prefix == moz {
            @if $prefix-for-mozilla {
                -moz-#{$property}: $value;
            }
        }
        @else if $prefix == ms {
            @if $prefix-for-microsoft {
                -ms-#{$property}: $value;
            }
        }
        @else if $prefix == o {
            @if $prefix-for-opera {
                -o-#{$property}: $value;
            }
        }
        @else if $prefix == spec {
            @if $prefix-for-spec {
                #{$property}: $value;
            }
        }
        @else  {
            @warn "Unrecognized prefix";
        }
    }
}


//--------------- GRADIENTS ---------------//

@mixin linear-gradient($pos, $G1, $G2: null,
                       $G3: null, $G4: null,
                       $G5: null, $G6: null,
                       $G7: null, $G8: null,
                       $G9: null, $G10: null,
                       $fallback: null) {
    // Detect what type of value exists in $pos
    $pos-type: type-of(nth($pos, 1));
    $pos-spec: null;
    $pos-degree: null;

    // If $pos is missing from mixin, reassign vars and add default position
    @if ($pos-type == color) or (nth($pos, 1) == "transparent")  {
        $G10: $G9; $G9: $G8; $G8: $G7; $G7: $G6; $G6: $G5;
        $G5: $G4; $G4: $G3; $G3: $G2; $G2: $G1; $G1: $pos;
        $pos: null;
    }

    @if $pos {
        $positions: _linear-positions-parser($pos);
        $pos-degree: nth($positions, 1);
        $pos-spec:   nth($positions, 2);
    }

    $full: $G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10;

    // Set $G1 as the default fallback color
    $fallback-color: nth($G1, 1);

    // If $fallback is a color use that color as the fallback color
    @if (type-of($fallback) == color) or ($fallback == "transparent") {
        $fallback-color: $fallback;
    }

    background-color: $fallback-color;
    background-image: -webkit-linear-gradient($pos-degree $full); // Safari 5.1+, Chrome
    background-image: unquote("linear-gradient(#{$pos-spec}#{$full})");
}

//************************************************************************//
// BORDER MIXINS
//************************************************************************//

// BORDER COLOR

@mixin border-color($top,$right: null,$bottom: null, $left: null) {
	@if ($right == null) {
		$right: $top;
	}

	@if ($bottom == null) {
		$bottom: $top;
	}

	@if ($left == null) {
		@if($right == null) {
			$left: $top;
		}
		@else {
			$left: $right;
		}
	}

	border-color: $top $right $bottom $left;
}

// BORDER RADIUS
@mixin border-top-radius($radii) {
    @include prefixer(border-top-left-radius, $radii, spec);
    @include prefixer(border-top-right-radius, $radii, spec);
}

@mixin border-bottom-radius($radii) {
    @include prefixer(border-bottom-left-radius, $radii, spec);
    @include prefixer(border-bottom-right-radius, $radii, spec);
}

@mixin border-left-radius($radii) {
    @include prefixer(border-top-left-radius, $radii, spec);
    @include prefixer(border-bottom-left-radius, $radii, spec);
}

@mixin border-right-radius($radii) {
    @include prefixer(border-top-right-radius, $radii, spec);
    @include prefixer(border-bottom-right-radius, $radii, spec);
}

@mixin border-radius($radii) {
	@include border-left-radius($radii);
	@include border-right-radius($radii);
}


// Shorthand mixin. Supports multiple parentheses-deliminated values for each variable.
// Example: @include transition (all 2s ease-in-out);
//          @include transition (opacity 1s ease-in 2s, width 2s ease-out);
//          @include transition-property (transform, opacity);

@mixin transition ($properties...) {
    // Fix for vendor-prefix transform property
    $needs-prefixes: false;
    $webkit: ();
    $moz: ();
    $spec: ();

    // Create lists for vendor-prefixed transform
    @each $list in $properties {
        @if nth($list, 1) == "transform" {
            $needs-prefixes: true;
            $list1: -webkit-transform;
            $list2: -moz-transform;
            $list3: ();

          @each $var in $list {
            $list3: join($list3, $var);

            @if $var != "transform" {
                $list1: join($list1, $var);
                $list2: join($list2, $var);
            }
          }

            $webkit: append($webkit, $list1);
            $moz: append($moz,    $list2);
            $spec: append($spec,   $list3);
        }

        // Create lists for non-prefixed transition properties
        @else {
            $webkit:  append($webkit, $list, comma);
            $moz:     append($moz,    $list, comma);
            $spec:    append($spec,   $list, comma);
        }
    }

    @if $needs-prefixes {
        -webkit-transition: $webkit;
        -moz-transition: $moz;
        transition: $spec;
    }
    @else {
        @if length($properties) >= 1 {
            @include prefixer(transition, $properties, webkit moz spec);
        }

        @else {
            $properties: all 0.15s ease-out 0s;
            @include prefixer(transition, $properties, webkit moz spec);
        }
    }
}

@mixin transition-property ($properties...) {
    -webkit-transition-property: transition-property-names($properties, 'webkit');
    -moz-transition-property: transition-property-names($properties, 'moz');
    transition-property: transition-property-names($properties, false);
}

@mixin transition-duration ($times...) {
    @include prefixer(transition-duration, $times, webkit moz spec);
}

@mixin transition-timing-function ($motions...) {
// ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier()
    @include prefixer(transition-timing-function, $motions, webkit moz spec);
}

@mixin transition-delay ($times...) {
    @include prefixer(transition-delay, $times, webkit moz spec);
}


// TRANSFORM

@mixin transform($property: none) {
//  none | <transform-function>
    @include prefixer(transform, $property, webkit moz ms o spec);
}

@mixin transform-origin($axes: 50%) {
// x-axis - left | center | right  | length | %
// y-axis - top  | center | bottom | length | %
// z-axis -                          length
    @include prefixer(transform-origin, $axes, webkit moz ms o spec);
}

@mixin transform-style ($style: flat) {
    @include prefixer(transform-style, $style, webkit moz ms o spec);
}